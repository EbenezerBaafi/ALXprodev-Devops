#!/bin/bash

# API base URL
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"

# List of Pokémon to fetch
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Output directory for JSON files
OUTPUT_DIR="pokemon_data"

# Error log file
ERROR_FILE="pokemon_errors.txt"

# Delay between requests (in seconds) to avoid rate limiting
DELAY=2

# Create output directory if it doesn't exist
mkdir -p "$OUTPUT_DIR"

# Initialize counters
success_count=0
fail_count=0

echo "=========================================="
echo "Starting Pokémon Data Retrieval"
echo "=========================================="
echo ""

# Loop through each Pokémon
for pokemon in "${POKEMON_LIST[@]}"; do
    # Convert to lowercase to ensure consistency
    pokemon_lower=$(echo "$pokemon" | tr '[:upper:]' '[:lower:]')
    
    echo "Fetching data for: $pokemon_lower..."
    
    # Construct API URL
    api_url="${API_BASE_URL}/${pokemon_lower}"
    
    # Output file path
    output_file="${OUTPUT_DIR}/${pokemon_lower}.json"
    
    # Make API request with HTTP status code
    response=$(curl -s -w "\n%{http_code}" "$api_url")
    
    # Extract HTTP status code (last line)
    http_code=$(echo "$response" | tail -n 1)
    
    # Extract response body (everything except last line)
    body=$(echo "$response" | sed '$d')
    
    # Check if request was successful (status code 200)
    if [ "$http_code" -eq 200 ]; then
        # Save response to file
        echo "$body" > "$output_file"
        echo "✓ Success: Data saved to $output_file"
        ((success_count++))
    else
        # Log error
        timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        error_msg="[$timestamp] Error: HTTP $http_code - Failed to retrieve data for $pokemon_lower"
        echo "$error_msg" >> "$ERROR_FILE"
        echo "✗ Failed: HTTP $http_code for $pokemon_lower"
        echo "  Error logged to $ERROR_FILE"
        ((fail_count++))
    fi
    
    # Add delay between requests to avoid rate limiting
    # Skip delay after the last Pokémon
    if [ "$pokemon" != "${POKEMON_LIST[-1]}" ]; then
        echo "  Waiting ${DELAY} seconds before next request..."
        sleep "$DELAY"
    fi
    
    echo ""
done

# Print summary
echo "=========================================="
echo "Summary"
echo "=========================================="
echo "Total Pokémon processed: ${#POKEMON_LIST[@]}"
echo "Successful: $success_count"
echo "Failed: $fail_count"
echo ""

if [ $success_count -gt 0 ]; then
    echo "Data files saved in: $OUTPUT_DIR/"
    echo "Files created:"
    ls -1 "$OUTPUT_DIR"/*.json 2>/dev/null | sed 's/^/  - /'
fi

if [ $fail_count -gt 0 ]; then
    echo ""
    echo "Errors logged in: $ERROR_FILE"
fi

echo ""
echo "Done!"
